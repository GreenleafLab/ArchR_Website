GInteractionsToWashU <- function(gi, minDist = NULL, outfile = NULL, url = FALSE) {
#if minimum distance is supplied, threshold the gi object upfront
if(!is.null(minDist)) {
gi <- gi[which(gi$dist >= minDist)]
}
df <- data.frame() #this will hold the data for output
#store the information for the mid-point of each anchor
middleOne <- round((end(ranges(anchorOne(gi))) + start(ranges(anchorOne(gi))))/2 )
middleTwo <- round((end(ranges(anchorTwo(gi))) + start(ranges(anchorTwo(gi))))/2 )
if(url) {
df1 <- data.frame(chr1 = seqnames(anchorOne(gi)),
start1 = middleOne-1,
end1 = middleOne +1,
coord2 = paste0(seqnames(anchorTwo(gi)),":",middleTwo-1,"-",middleTwo+1,",",gi$coaccess),
orderID = seq(from = 1, to = length(gi), by = 1))
df2 <- data.frame(chr1 = seqnames(anchorTwo(gi)),
start1 = middleTwo-1,
end1 = middleTwo +1,
coord2 = paste0(seqnames(anchorOne(gi)),":",middleOne-1,"-",middleOne+1,",",gi$coaccess),
orderID = seq(from = 1, to = length(gi), by = 1))
df_url <- as.data.frame(rbind(df1, df2))
df_url <- df_url[order(df_url$start1),]
df_url <- df_url[order(gsub(pattern = "chr", replacement = "", x = df_url$chr1)),]
df_url$orderID <- seq(from = 1, to = nrow(df_url), by = 1)
df_url$direction <- "."
df <- df_url
} else {
df <- as.data.frame(matrix(nrow = length(gi), ncol = 3, NA))
colnames(df) <- c("anchor1", "anchor2", "score")
df$anchor1 <- paste(seqnames(anchorOne(gi)), middleOne-1, middleOne+1, sep = ",")
df$anchor2 <- paste(seqnames(anchorTwo(gi)), middleTwo-1, middleTwo+1, sep = ",")
df$score <- gi$coaccess
}
if(!is.null(outfile)) {
write.table(x = df, file = outfile, quote = FALSE, sep = "\t", col.names = FALSE, row.names = FALSE)
} else {
return(df)
}
}
GInteractionsToWashU(gi = gi, minDist = 10000, outfile = "K:/Shared drives/Brain_Merged/Analysis/scATAC/190713/CoAccessibility/Peaks-Co-Accessibility_Significant_KUNDAJE_GenomicInteractions_WashU.txt", url = TRUE)
middleOne <- round((end(ranges(anchorOne(gi))) + start(ranges(anchorOne(gi))))/2 )
library(GenomicInteractions)
GInteractionsToWashU(gi = gi, minDist = 10000, outfile = "K:/Shared drives/Brain_Merged/Analysis/scATAC/190713/CoAccessibility/Peaks-Co-Accessibility_Significant_KUNDAJE_GenomicInteractions_WashU.txt", url = TRUE)
GInteractionsToWashU(gi = gi, minDist = 10000, outfile = "K:/Shared drives/Brain_Merged/Analysis/scATAC/190713/CoAccessibility/Peaks-Co-Accessibility_Significant_KUNDAJE_GenomicInteractions_WashU.txt", url = TRUE)
GInteractionsToWashU(gi = gi, minDist = 10000, outfile = "K:/Shared drives/Brain_Merged/Analysis/scATAC/190713/CoAccessibility/Peaks-Co-Accessibility_Significant_KUNDAJE_GenomicInteractions_WashU.bed", url = FALSE)
GInteractionsToWashU(gi = gi, outfile = "K:/Shared drives/Brain_Merged/Analysis/scATAC/190713/CoAccessibility/Peaks-Co-Accessibility_Significant_KUNDAJE_GenomicInteractions_WashU.bed", url = FALSE)
temp <- readRDS("K:/Shared drives/Brain_Merged/Analysis/scATAC/190713/PCs-25-Peaks-25-25-25-Res-2-6-10.colData-metadata.rds")
temp
str(temp)
ArchRx::quantileCut()
quantileCut()
library(ArchRx)
library(SCArchR)
library(ggplot2)
quantileCut()
quantileCut
df <- readRDS("K:/Shared drives/Brain_Merged/Analysis/scATAC/190713/PCs-25-Peaks-25-25-25-Res-2-6-10.colData-metadata.rds")
df
se <- df
se
str(se)
colData(se)
se$colData
df se$colData
df <- se$colData
write.table(x = df, file = "K:/Shared drives/Brain_Merged/Analysis/scATAC/190713/PCs-25-Peaks-25-25-25-Res-2-6-10.colData-metadata.txt", quote = FALSE, sep = "\t", col.names = NA)
?requireNamespace
library(ArchR)
getQuantiles <- function(v, len = length(v)){
if(length(v) < len){
v2 <- rep(0, len)
v2[seq_along(v)] <- v
}else{
v2 <- v
}
p <- trunc(rank(v2))/length(v2)
if(length(v) < len){
p <- p[seq_along(v)]
}
return(p)
}
df <- as.data.frame(matrix(nrow = 8, ncol =5, NA))
colnames(df) <- c("id","tss","log10frags","quant_tss","quant_log10frags")
df$id <- 1:8
df$tss <- c(9,4.5,20,12,13,8,11,17)
df$log10frags <- c(3.5,4.5,4,4.7,3,3.3,4.1,3.8)
df$quant_tss <- getQuantiles(df$tss)
df$quant_log10frags <- getQuantiles(df$log10frags)
df
dist(x = df[,4:5], method = "euclidean")
dist(x = df[,2:3], method = "euclidean")
pre <- ggPoint(x = df$tss, y = df$log10frags, color = df$id, discrete = TRUE, discreteSet = "stallion", baseSize = 8,
xlim = c(2.5,22.5), ylim = c(2.25,5.25), ratioYX = 3/20, size = 3, xlabel = "TSS Score", ylabel = "log10(Num Fragments)")
post <- ggPoint(x = df$quant_tss, y = df$quant_log10frags, color = df$id, discrete = TRUE, discreteSet = "stallion", baseSize = 8,
xlim = c(-0.1,1.1), ylim = c(-0.1,1.1), ratioYX = 1, size = 3, xlabel = "Quantile TSS Score", ylabel = "Quantile log10(Num Fragments)")
library(ArchR)
setwd("K:/My Drive/Work/GitHub/ArchR_Website/")
library(pkgdown)
build_site()
build_site()
build_site()
build_site()
build_site()
build_articles()
build_site()
build_articles()
build_site()
build_site()
build_articles()
build_articles()
build_articles()
build_articles()
build_articles()
build_site()
build_site()
build_site()
setwd("K:/My Drive/Work/GitHub/ArchR_Website/bookdown/")
render_book(input = "index.Rmd", output_dir = "../docs/bookdown")
library(bookdown)
render_book(input = "index.Rmd", output_dir = "../docs/bookdown")
render_book(input = "index.Rmd", output_dir = "../docs/bookdown")
render_book(input = "index.Rmd", output_dir = "../docs/bookdown")
render_book(input = "index.Rmd", output_dir = "../docs/bookdown")
library(DEGreport)
library(dplyr)
library(psych)
library(reshape2)
library(tidyr)
library(tibble)
library(ggplot2)
options(scipen = 999)
data(humanGender)
library(DESeq2)
#functions
.runpca <- function(genesbysamples, scale_data_for_pca = TRUE,
min_pve_pct_pc = 1.0) {
# estimate variance in data by pc:
pca.res <- prcomp(t(genesbysamples), center = TRUE,
scale. = scale_data_for_pca, retx = TRUE)
# examine how much variance is explained by pcs,
# and consider those with pve >= (min_pve_pct_pc %):
pc.var <- pca.res$sdev^2L
pve <- 100L * (pc.var / sum(pc.var))
npca <- max(1L, length(which(pve >= min_pve_pct_pc)))
samplepcvals <- pca.res$x[, 1L:npca, drop = FALSE]
list(samplepcvals = samplepcvals, pve = pve)
}
.calccompletecorandplot <- function(compare_data, covar_data,
correlationtype, title,
weights = NULL,
exclude_vars_from_fdr=NULL,
max_fdr = 0.1) {
# get factor and continuous covariates
character_vars <- lapply(covar_data, class) == "character"
if (sum(character_vars) > 0 )
covar_data[, character_vars] <- apply(covar_data[, character_vars,
drop = FALSE],
1L, as.factor)
factorcovariates <- select_if(covar_data, is.factor) %>% colnames
contcovariates <- select_if(covar_data, is.numeric) %>% colnames
all_covariates <- cbind(covar_data[, contcovariates, drop = FALSE],
covar_data[, factorcovariates, drop = FALSE] %>%
mutate_all(as.numeric))
cov_cor <- corr.test(compare_data,
all_covariates,
use = 'pairwise.complete.obs',
method = correlationtype,
adjust = "none")
all_cor_vals <- cov_cor[["r"]]
all_cor_p <- cov_cor[["p"]]
rownames(all_cor_vals) <- colnames(compare_data)
colnames(all_cor_vals) <- colnames(all_covariates)
rownames(all_cor_p) <- colnames(compare_data)
colnames(all_cor_p) <- colnames(all_covariates)
effects.significantcovars <- all_cor_vals
effects.significantcovars[all_cor_p > max_fdr] <- 0
effects.significantcovars <- colSums(abs(effects.significantcovars) * replicate(dim(effects.significantcovars)[2L], weights / sum(weights)))
effects.significantcovars <- effects.significantcovars[order(abs(effects.significantcovars), decreasing = TRUE)]
cor_mat <- melt(all_cor_p, varnames = c("compare", "covar"))
colnames(cor_mat)[colnames(cor_mat) == "value"] <- "pvalue"
cor_mat[["compare"]] <- factor(cor_mat[["compare"]],
levels = rownames(all_cor_p))
cor_mat[["covar"]] <- factor(cor_mat[["covar"]],
levels = colnames(all_cor_p))
cor_mat[["r"]] <- melt(all_cor_vals)[["value"]]
cor_mat[["fdr"]] <- p.adjust(cor_mat[["pvalue"]], method = "fdr")
return(list(mat = cor_mat,
effects.significantcovars = effects.significantcovars))
}
.numeric_effect_size <- function(covar_numeric, smart = TRUE){
.smart <- function(v) {
if (min(v) >= 0 & max(v)<=1)
return(max(v)-min(v))
if (min(v) >= 0 & max(v)<=100)
return(max(v)-min(v))
1 - min(v/max(v))
}
apply(covar_numeric,
2, function(v){
if (smart)
return(.smart(v))
max(v)-min(v)
}
)
}
.effect_size <- function(ma, covar_numeric, covar_factors,
smart = TRUE){
ma_sd <- data.frame(covar = colnames(covar_numeric),
effect_size = .numeric_effect_size(covar_numeric,
smart),
stringsAsFactors = FALSE)
if (ncol(covar_factors) > 0){
ma_sd <- bind_rows(ma_sd,
data.frame(covar = colnames(covar_factors),
effect_size = 1,
stringsAsFactors = FALSE)
)
}
ma <- left_join(ma, ma_sd, by = "covar")
ma[["effect_size"]][ma[["effect_size"]] < 0.01] <- 0.01
ma[["effect_size"]][ma[["effect_size"]] > 1] <- 1
ma[["type_variable"]] <- "categorical"
ma[["type_variable"]][ma[["covar"]]  %in% colnames(covar_numeric)] <- "numeric"
ma
}
.reduce_covariates <- function(corMatrix, pcsMatrix, method = "lm"){
pcs <- colnames(pcsMatrix)[grepl("PC[0-9]+", colnames(pcsMatrix))]
significants <- lapply(pcs, function(pc){
pc_var <- corMatrix %>%
filter(fdr < 0.01, grepl(pc, compare)) %>%
arrange(abs(r)) %>%
.[["covar"]] %>%
as.character()
if (length(pc_var) == 0)
return(NULL)
data <- pcsMatrix[,c(pc, pc_var)]
colnames(data)[1] = "PC"
data[,2:ncol(data)] <- apply(data[,2:ncol(data), drop = FALSE], 2, scale)
pc_sig <- .model(data, method)
pc_sig[["PC"]] = pc
pc_sig %>% filter(p.value < 0.05)
}) %>% bind_rows() %>%
filter(!grepl("Intercept", !!!sym("term")))
if (nrow(significants) == 0)
return(data.frame(estimate=0, p.value=0, PC="", term=""))
significants[,c("estimate", "p.value", "PC", "term")]
}
.model <- function(data, method = "lm"){
if (method == "lm"){
pc_sig <- lm(PC~., data=data) %>%
broom::tidy()
}else if (method == "lasso"){
pc_sig <- lm.lasso <- l1ce(PC ~ 0 + ., data=data, sweep.out = NULL) %>%
summary() %>%
.[["coefficients"]] %>%
broom::tidy()
}
names(pc_sig) <- c("term", "estimate", "std.error", "statistic", "p.value")
return(pc_sig)
}
.generate_scatter_plot <- function(metadata, corMat){
if (sum(corMat[["fdr"]] < 0.1, na.rm = T) == 0) return(NULL)
plist <- apply(corMat[corMat[["fdr"]] < 0.1, ], 1, function(row){
xs <- strsplit(row[1], " ")[[1]][1]
ys <- row[2]
ggplot(metadata, aes_string(x = xs, y = ys)) +
geom_point() +
ggtitle(paste(xs, ys))
})
names <- corMat[corMat[["fdr"]] < 0.1, ] %>%
mutate(name = paste(compare, covar, sep = ":")) %>%
.[["name"]]
names(plist) <- names
plist
}
degClean <- function (ma) {
ma <- ma[, colSums(is.na(ma)) < nrow(ma)]
lapply(ma, function(x) {
if (length(unique(x)) < length(x) * 0.1 & is.numeric(x))
x <- as.factor(x)
if ((class(x) %in% c("factor", "character"))) {
.f = as.factor(x)
if (length(levels(.f)) < 2L)
return(NULL)
if (length(levels(.f)) > length(.f) * 0.8)
return(NULL)
return(.f)
}
if (sd(x, na.rm = TRUE) == 0)
return(NULL)
as.numeric(x)
}) %>% Filter(Negate(is.null), .) %>% bind_cols %>% as.data.frame() %>%
set_rownames(row.names(ma))
}
se <- readRDS("K:/Shared drives/Brain_Merged/Analysis/ArchR_KundajeCounts/190716_ArchRSE_ControlsOnly_Kundaje_30percent_Counts_NormCounts.rds")
rownames(se)
se
colData(Se)
colData(se)
colnames(colData(se))
getwd()
setwd("../")
build_site()
devtools::install_github("GreenleafLab/ArchR@v0.9.1-beta", repos = BiocManager::repositories())
library(ArchR)
devtools::install_github("GreenleafLab/ArchR", ref="master", repos = BiocManager::repositories())
getwd()
build_site()
build_site()
build_favicons()
build_favicons(overwrite = TRUE)
build_site()
build_site()
sessionInfo()
getwd()
build_site()
colData(Se)
colData(se)
nrow(colData(se))
more_meta <- read.table(file = "K:/Shared drives/Brain_Merged/Analysis/ArchR_KundajeCounts/200423_Additional_Metadata_for_Covariate_Analysis.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
head(more_meta)
library(ArchRx)
more_meta_merged <- groupMeans(mat = more_meta, groups = more_meta$Sample)
subset <- more_meta[,c(1,12:17)]
head(subset)
subset_merged <- groupMeans(mat = subset, groups = subset$Sample)
head(t(subset))
subset_merged <- groupMeans(mat = t(subset), groups = subset$Sample)
subset[,2:7] <- as.numeric(subset[,2:7])
subset[,2:7]
as.numeric(subset[,2:7])
subset[,2:7] <- as.numeric(subset[,2])
subset <- more_meta[,c(1,12:17)]
subset[,2] <- as.numeric(subset[,2])
subset[,3] <- as.numeric(subset[,3])
subset[,4] <- as.numeric(subset[,4])
subset[,5] <- as.numeric(subset[,5])
subset[,6] <- as.numeric(subset[,6])
subset[,7] <- as.numeric(subset[,7])
more_meta <- read.table(file = "K:/Shared drives/Brain_Merged/Analysis/ArchR_KundajeCounts/200423_Additional_Metadata_for_Covariate_Analysis.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
subset <- more_meta[,c(1,12:17)]
subset[,2] <- as.numeric(subset[,2])
subset[,3] <- as.numeric(subset[,3])
subset[,4] <- as.numeric(subset[,4])
subset[,5] <- as.numeric(subset[,5])
subset[,6] <- as.numeric(subset[,6])
subset[,7] <- as.numeric(subset[,7])
subset_merged <- groupMeans(mat = t(subset), groups = subset$Sample)
t(subset)
as.numeric(subset[,2])
subset <- more_meta[,c(1,12:17)]
subset[,2] <- as.numeric(subset[,2])
subset[,3] <- as.numeric(subset[,3])
subset[,4] <- as.numeric(subset[,4])
subset[,5] <- as.numeric(subset[,5])
subset[,6] <- as.numeric(subset[,6])
subset[,7] <- as.numeric(subset[,7])
t(subset)
subset
more_meta <- read.table(file = "K:/Shared drives/Brain_Merged/Analysis/ArchR_KundajeCounts/200423_Additional_Metadata_for_Covariate_Analysis.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE,
colClasses = c("character","character","character","character","character","character","character","character","character","character","character","numeric","numeric","numeric","numeric","numeric","numeric"))
subset <- more_meta[,c(1,12:17)]
t(subset)
?groupMeans
subset2 <- t(subset)
colnames(subset2) <- more_meta$Sample
head(subset2)
subset <- more_meta[,c(12:17)]
subset2 <- t(subset)
colnames(subset2) <- more_meta$Sample
subset2
subset2_merged <- groupMeans(mat = subset2, groups = more_meta$Sample)
subset2_merged
subset2_merged <- t(groupMeans(mat = subset2, groups = more_meta$Sample))
subset2_merged
nrow(subset2_merged)
all.equal(rownames(meta), rownames(subset2_merged))
counts <- assays(se)$log2norm
meta <- colData(se)
meta <- meta[c("RegionMod","TissueCenter","Batch","Pool","Gender","PMI","ApoE")]
meta[,"PMI"] <- as.numeric(meta[,"PMI"])
all.equal(rownames(meta), rownames(subset2_merged))
subset2_merged <- subset2_merged[order(rownames(subset2_merged)),]
all.equal(rownames(meta), rownames(subset2_merged))
meta <- meta[order(rownames(meta)),]
all.equal(rownames(meta), rownames(subset2_merged))
metadata <- cbind(meta,subset2_merged)
metadata
minPC <- 1
fdr = 0.1
scale = FALSE
correlation = "kendall"
addCovDen = TRUE
legacy = FALSE
smart = TRUE
method = "lm"
plot = TRUE
metadata <- as.data.frame(metadata)
metadata <- degClean(metadata)
covar_class <- sapply(metadata[1, ], class)
metadata <- metadata %>% mutate_all(as.numeric) %>% as.data.frame() %>%
set_rownames(row.names(metadata))
stopifnot(identical(colnames(counts), rownames(metadata)))
pcares <- .runpca(genesbysamples = counts, scale_data_for_pca = scale,
min_pve_pct_pc = minPC)
counts <- counts[,order(colnames(counts))]
stopifnot(identical(colnames(counts), rownames(metadata)))
pcares <- .runpca(genesbysamples = counts, scale_data_for_pca = scale,
min_pve_pct_pc = minPC)
samplepcvals <- pcares[["samplepcvals"]]
pve <- pcares[["pve"]]
original_names <- colnames(samplepcvals)
pc_pct <- data.frame(pc = colnames(samplepcvals), pct = paste(" (",
sprintf("%.2f", pve[1L:ncol(samplepcvals)]), "%)", sep = ""),
stringsAsFactors = FALSE)
samplesbyfullcovariates <- metadata[, which(apply(metadata,
2L, function(dat) all(!is.na(dat)))), drop = FALSE]
covar_class <- covar_class[colnames(samplesbyfullcovariates)]
exclude_vars_from_fdr <- setdiff(colnames(metadata), colnames(samplesbyfullcovariates))
covar_factors <- samplesbyfullcovariates[, names(covar_class)[covar_class !=
"numeric"], drop = FALSE]
covar_numeric <- samplesbyfullcovariates[, names(covar_class)[covar_class ==
"numeric"]]
samplesbyfullcovariates = cbind(covar_factors, covar_numeric)
corrRes <- .calccompletecorandplot(samplepcvals, samplesbyfullcovariates,
correlation, title, weights = pve[1L:dim(samplepcvals)[2L]],
exclude_vars_from_fdr)
ma <- corrRes[["mat"]]
ma$sig <- 0
ma$sig[ma[["fdr"]] <= fdr] <- 1
corMa <- ma[, c("r", "compare", "covar")] %>% spread(!!sym("compare"),
!!sym("r")) %>% remove_rownames() %>% column_to_rownames("covar")
cor_meta <- .calccompletecorandplot(samplesbyfullcovariates,
samplesbyfullcovariates, correlation, "", weights = 1L)
corMeta <- cor_meta[["mat"]][, c("r", "compare", "covar")] %>%
spread(!!sym("compare"), !!sym("r"), fill = 0) %>% remove_rownames() %>%
column_to_rownames("covar")
hc <- hclust(as.dist((1 - corMeta)^2), method = "ward.D")
ma[["covar"]] = as.character(ma[["covar"]])
ma[["compare"]] = as.character(ma[["compare"]])
write.table(x = ma, file = "K:/Shared drives/Brain_Merged/Analysis/ArchR_KundajeCounts/200423_PCs_Correlation_With_Covariates.txt", quote = FALSE, sep = "\t", col.names = NA)
ma_subset <- ma[which(ma$compare %ni% c("PC6","PC7","PC8")),]
ma_subset <- ma_subset[which(ma$covar %ni% c("TissueCenter","Batch","Pool")),]
ma_subset$covar[which(ma_subset$covar == "covar_numeric")] <- "PMI"
ma_subset$covar[which(ma_subset$covar == "RegionMod")] <- "Region"
pc_colors <- c(PC1 = "#1F7CEA", PC2 = "#D60000", PC3 = "#941BEA", PC4 = "#FF6D2C", PC5 = "#00B26E")
ggplot(ma_subset) + geom_count(aes(x = covar, y = -log10(fdr), color = compare, size = abs(r))) +
geom_hline(yintercept = 1) + theme_ArchR()+ scale_y_continuous(limits = c(0,3),expand = c(0,0)) +
scale_color_manual(values = pc_colors)
ggplot(ma_subset) + geom_count(aes(x = covar, y = -log10(fdr), color = compare, size = abs(r))) +
geom_hline(yintercept = 1) + theme_ArchR()+ scale_y_continuous(limits = c(0,10),expand = c(0,0)) +
scale_color_manual(values = pc_colors)
ggplot(ma_subset) + geom_count(aes(x = covar, y = -log10(fdr), color = compare, size = abs(r))) +
geom_hline(yintercept = 1) + theme_ArchR()+ scale_y_continuous(limits = c(0,30),expand = c(0,0)) +
scale_color_manual(values = pc_colors)
ggsave(filename = "K:/Shared drives/Brain_Merged/Analysis/ArchR_KundajeCounts/200423_PCs_Correlation_With_Covariates.pdf", plot = last_plot(), device = "pdf", useDingbats = FALSE, width = 4, height = 6)
ggplot(ma_subset) + geom_count(aes(x = covar, y = -log10(fdr), color = compare, size = abs(r))) +
geom_hline(yintercept = 1) + theme_ArchR()+ scale_y_continuous(limits = c(0,12),expand = c(0,0)) +
scale_color_manual(values = pc_colors)
ggsave(filename = "K:/Shared drives/Brain_Merged/Analysis/ArchR_KundajeCounts/200423_PCs_Correlation_With_Covariates.pdf", plot = last_plot(), device = "pdf", useDingbats = FALSE, width = 4, height = 6)
ma_subset
metadata
pcares
samplesbyfullcovariates
corrRes
ma
corMa
cor_meta
ma_subset <- ma[which(ma$compare %ni% c("PC6","PC7","PC8")),]
ma_subset
ma_subset <- ma_subset[which(ma$covar %ni% c("TissueCenter","Batch","Pool")),]
ma_subset
ma_subset <- ma[which(ma$compare %ni% c("PC6","PC7","PC8")),]
ma_subset
ma_subset[which(ma$covar %ni% c("TissueCenter","Batch","Pool")),]
ma_subset[which(ma_subset$covar %ni% c("TissueCenter","Batch","Pool")),]
ma_subset <- ma_subset[which(ma_subset$covar %ni% c("TissueCenter","Batch","Pool")),]
ma_subset$covar[which(ma_subset$covar == "covar_numeric")]
ma_subset$covar[which(ma_subset$covar == "RegionMod")]
ma_subset$covar[which(ma_subset$covar == "RegionMod")] <- "Region"
pc_colors <- c(PC1 = "#1F7CEA", PC2 = "#D60000", PC3 = "#941BEA", PC4 = "#FF6D2C", PC5 = "#00B26E")
ggplot(ma_subset) + geom_count(aes(x = covar, y = -log10(fdr), color = compare, size = abs(r))) +
geom_hline(yintercept = 1) + theme_ArchR()+ scale_y_continuous(limits = c(0,12),expand = c(0,0)) +
scale_color_manual(values = pc_colors)
ggsave(filename = "K:/Shared drives/Brain_Merged/Analysis/ArchR_KundajeCounts/200423_PCs_Correlation_With_Covariates.pdf", plot = last_plot(), device = "pdf", useDingbats = FALSE, width = 4, height = 6)
se
mat <- t(getAssay(se, "log2norm"))
pcs <- c(1,3) #PCs to be plotted
pca <- prcomp(mat)
pca_df <- pca$x[,pcs]
pca_stats <- summary(pca)$importance
pca_var <- data.frame(rank = seq(from = 1, to = ncol(pca_stats), by = 1), var = pca_stats["Proportion of Variance",])
pca_var_plot <- ggPlotPoint(x=pca_var$rank,y=pca_var$var, xlabel="PC Number", color = rep(1,ncol(pca_stats)), discrete = TRUE,
ylabel="Proportion of Variance", title=paste0("PCA Variance Explained per PC"))
print("PCA")
colors <- c("Group","RegionMod","Cohort","Gender","ApoE") #metadata column names used for coloration of plots
for (i in 1:length(colors)) {
print(paste(i, " - " ,colors[i]))
plot_pca <- ggPlotPoint(x=pca_df[,1],y=pca_df[,2], color = colData(se)[,colors[i]], xlabel=paste0("PC",pcs[1],"(",round((pca_var[pcs[1], "var"] * 100),2),"%)"), pal = colorMap(se)[[colors[i]]],
ylabel=paste0("PC",pcs[2],"(",round((pca_var[pcs[2], "var"] * 100),2),"%)"), title=paste0("PCA_",pcs[1],"_vs_",pcs[2]))
print(plot_pca)
}
sc_meta <- readRDS("K:/Shared drives/Brain_Merged/Analysis/scATAC/190713/PCs-25-Peaks-25-25-25-Res-2-6-10.colData-metadata.rds")
sc_meta
sc_meta$colData
sc_meta$metadata
sc_meta$metadata$LSI
sc_meta$metadata$LSI$svd
?subsetByOverlaps
?subsetByOverlaps
library(chromVAR)
?getBackgroundPeaks
