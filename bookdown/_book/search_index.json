[
["index.html", "ArchR Preface", " ArchR Jeffrey Granja and Ryan Corces 2020-02-13 Preface This is the ArchR documentation. "],
["getting-started-with-archr.html", "Chapter 1 Getting Started with ArchR", " Chapter 1 Getting Started with ArchR The following tutorial shows the basics of setting up and interacting with an ArchRProject using a gold-standard downsampled dataset of hematopoietic cells Granja* et al. Nature Biotechnology 2019. This tutorial and all of the accompanying vignettes assume that you are running ArchR locally. QQQ Once all of these steps work for you, feel free to set up ArchR to work in a cluster environment. This tutorial does not explain every detail of every step but rather shows you how to perform the most common analyses. Please see the Vignettes section for more details on each major analytical step and all of the major features of ArchR. "],
["what-is-an-arrowfile-archrproject.html", "1.1 What is an ArrowFile / ArchRProject?", " 1.1 What is an ArrowFile / ArchRProject? The base unit of an analytical projHemeect in ArchR is called an ArrowFile. Each ArrowFile stores all of the data associated with an individual sample (i.e. metadata, accessible fragments, and data matrices). Here, an “individual sample” would be the most detailed unit of analysis desired (for ex. a single replicate of a particular condition). During creation and as additional analyses are performed, ArchR updates and edits each ArrowFile to contain additional layers of information. It is worth noting that, to ArchR, an ArrowFile is actually just a path to an external file stored on disk. More explicitly, an ArrowFile is not an R-language object that is stored in memory. Because of this, we use an ArchRProject object to associate these ArrowFiles together into a single analytical framework that can be rapidly accessed in R. This ArchRProject object is small in size and is stored in memory. Certain actions can be taken directly on ArrowFiles while other actions are taken on an ArchRProject which in turn updates each associated ArrowFile. Because ArrowFiles are stored as large HDF5-format files, “get-er” functions in ArchR retrieve data by interacting with the ArchRProject while “add-er” functions either (i) add data directly to ArrowFiles, (ii) add data directly to an ArchRProject, or (iii) add data to ArrowFiles by interacting with an ArchRProject. "],
["getting-set-up.html", "1.2 Getting Set Up", " 1.2 Getting Set Up The first thing we do is set up our working directory, load our gene and genome annotations, and set the number of threads we would like to use. Depending on the configuration of your local environment, you may need to modify the number of threads used below in addArchRThreads(). By default ArchR uses half of the total number of threads available but you can adjust this manually as you see fit. If you are using windows, the usable threads will automatically be set to 1 because the parallel processing in ArchR is build for Unix-based operating systems. For the purposes of this tutorial, we provide the gene and genome annotations but you can create your own using the createGeneAnnotation() and createGenomeAnnotation() functions. See the Gene and Genome Annotations vignette for more information. #Load R Libraries library(ArchR) #Create a new folder and set this as the working directory for tutorial analyses wd &lt;- &quot;ArchR_Walkthrough&quot; dir.create(wd, showWarnings = FALSE, recursive = TRUE) setwd(wd) #Set Genome Annotations to be used #Since our tutorial data sets are using scATAC-seq data from hg19 we will set that as the default genome. addArchRGenome(&quot;hg19&quot;) #Set Default Threads for ArchR Functions #The recommendation is to set it around 1/2 to 3/4 of the total available cores. addArchRThreads(threads = 6) "],
["creating-arrow-files.html", "1.3 Creating Arrow Files", " 1.3 Creating Arrow Files For this tutorial, we will download a collection of fragment files. Fragment files are one of the base file types of the 10x Genomics analytical platform (and other platforms) and can be easily created from any BAM file. See the ArchR input file types vignette for information on making your own fragment files for input to ArchR. Once we have our fragment files, we provide their paths as a character vector to createArrowFiles(). During creation, some basic metadata and matrices are added to each ArrowFile including a “TileMatrix” containing insertion counts across genome-wide 500-bp bins (see addTileMatrix()) and a “GeneScoreMatrix” that is determined based on weighting insertion counts in tiles nearby a gene promoter (see addGeneScoreMatrix()). These gene activity scores are described in more depth in the Gene Activity Score vignette. #Get Tutorial Data ~0.6GB To Download (if downloaded already ArchR will bypass downloading). inputFiles &lt;- getTutorialData(&quot;Hematopoiesis&quot;) inputFiles # scATAC_BMMC_R1 # &quot;HemeFragments/scATAC_BMMC_R1.fragments.tsv.gz&quot; # scATAC_CD34_BMMC_R1 # &quot;HemeFragments/scATAC_CD34_BMMC_R1.fragments.tsv.gz&quot; # scATAC_PBMC_R1 # &quot;HemeFragments/scATAC_PBMC_R1.fragments.tsv.gz&quot; #Create Arrow Files (~10-15 minutes) w/ helpful messages displaying progress. #For each sample, this step will: # 1. Read accessible fragments. # 2. Calculate QC Information for each cell (TSS Enrichment, Nucleosome info). # 3. Filter cells based on QC parameters. # 4. Create a genome-wide TileMatrix using 500-bp bins. # 5. Create a GeneScoreMatrix using the custom geneAnnotation related to when we set addArchRGenome. ArrowFiles &lt;- createArrowFiles( inputFiles = inputFiles, sampleNames = names(inputFiles), filterTSS = 4, #Dont set this too high because you can always increase later filterFrags = 1000, addTileMat = TRUE, addGeneScoreMat = TRUE ) ArrowFiles # [1] &quot;scATAC_BMMC_R1.arrow&quot; &quot;scATAC_CD34_BMMC_R1.arrow&quot; # [3] &quot;scATAC_PBMC_R1.arrow&quot; #JJJ QualityControl/scATAC_BMMC_R2/scATAC_BMMC_R2-TSS_by_Unique_Frags.pdf #JJJ QualityControl/scATAC_BMMC_R2/scATAC_BMMC_R2-Fragment_Size_Distribution.pdf "],
["inferring-scatac-seq-doublets-with-archr.html", "1.4 Inferring scATAC-seq Doublets with ArchR", " 1.4 Inferring scATAC-seq Doublets with ArchR One major source of trouble in single-cell data is the contribution of “doublets” to the analysis. A doublet refers to a single droplet that received a single barcoded bead and more than one nucleus. This causes the reads from more than one cell to appear as a single cell. We remove these computationally and describe this doublet removal process in more depth in the doublet removal vignette. #Add Infered Doublet Scores to each Arrow File (~2-5 min per sample) #By default ArchR uses the doublet params as described in the ArchR paper. #We show some of the main adjustable features below for more information #Try ?addDoubletScores to see further documentation on parameters for doublet identification. doubScores &lt;- addDoubletScores( input = ArrowFiles, k = 10, #Refers to how many cells near a &quot;pseudo-doublet&quot; to count. knnMethod = &quot;UMAP&quot;, #Refers to embedding to use for nearest neighbor search with doublet projection. LSIMethod = 1 ) "],
["creating-an-archrproject.html", "1.5 Creating An ArchRProject", " 1.5 Creating An ArchRProject One major source of trouble in single-cell data is the contribution of “doublets” to the analysis. A doublet refers to a single droplet that received a single barcoded bead and more than one nucleus. This causes the reads from more than one cell to appear as a single cell. We remove these computationally and describe this doublet removal process in more depth in the doublet removal vignette. #Create ArchRProject #The outputDirectory here describes where all downstream analyses and plots go. #ArchR will add geneAnnotation and genomeAnnotations related to addArchRGenome(&quot;hg19&quot;) #as described above. projHeme &lt;- ArchRProject( ArrowFiles = ArrowFiles, outputDirectory = &quot;HemeTutorial&quot;, copyArrows = TRUE #This is recommened so that if you modify the ArrowFiles you have an original copy for later usage. ) #Lets look at our ArchRProject projHeme # class: ArchRProject # outputDirectory: /Volumes/JG_SSD_2/ArchR_Walkthrough/HemeTutorial # samples(3): scATAC_BMMC_R1 scATAC_CD34_BMMC_R1 scATAC_PBMC_R1 # sampleColData names(1): ArrowFiles # cellColData names(11): DoubletEnrichment DoubletScore ... Sample # TSSEnrichment # numberOfCells(1): 10661 # medianTSS(1): 16.832 # medianFrags(1): 3050 We can see from above the specified outputDirectory, sampleNames, sampleColData (column data associated with each sample), cellColData (column data associated with each cell), the number of cells, median TSS enrichment and median number of fragments. Additionally since we already computed doublet enrichment scores we can see in cellColData a column name “DoubletEnrichment” and “DoubletScore” which are related to the above addition of addDoubletScores. "],
["manipulating-an-archrproject.html", "1.6 Manipulating An ArchRProject", " 1.6 Manipulating An ArchRProject Now that we have created an ArchRProject, there ample things that one can do to easily access/manipulate the data associated. #Example 1. The `$` accessor, this allows direct access to cellColData ##A. Access cell names associated with each cell head(projHeme$cellNames) # [1] &quot;scATAC_BMMC_R1#TTATGTCAGTGATTAG-1&quot; &quot;scATAC_BMMC_R1#AAGATAGTCACCGCGA-1&quot; # [3] &quot;scATAC_BMMC_R1#GCATTGAAGATTCCGT-1&quot; &quot;scATAC_BMMC_R1#TATGTTCAGGGTTCCC-1&quot; # [5] &quot;scATAC_BMMC_R1#TCCATCGGTCCCGTGA-1&quot; &quot;scATAC_BMMC_R1#AGTTACGAGAACGTCG-1&quot; ##B. Access sample names associated with each cell projHeme$Sample # character-Rle of length 10661 with 3 runs # Lengths: 4932 3275 2454 # Values : &quot;scATAC_BMMC_R1&quot; &quot;scATAC_CD34_BMMC_R1&quot; &quot;scATAC_PBMC_R1&quot; ##C. Access TSS Enrichment Scores for each cell quantile(projHeme$TSSEnrichment) # 0% 25% 50% 75% 100% # 4.027 13.922 16.832 19.937 41.782 #Example 2. Subsetting an ArchRProject By Cells ##A. Subsetting like a data.frame numerically projHeme[1:100, ] #First 100 cells # class: ArchRProject # outputDirectory: /Volumes/JG_SSD_2/ArchR_Walkthrough/HemeTutorial # samples(3): scATAC_BMMC_R1 scATAC_CD34_BMMC_R1 scATAC_PBMC_R1 # sampleColData names(1): ArrowFiles # cellColData names(11): DoubletEnrichment DoubletScore ... Sample # TSSEnrichment # numberOfCells(1): 100 # medianTSS(1): 10.7725 # medianFrags(1): 10200.5 ##B. Subetting like a data.frame with cellNames projHeme[projHeme$cellNames[1:100], ] # class: ArchRProject # outputDirectory: /Volumes/JG_SSD_2/ArchR_Walkthrough/HemeTutorial # samples(3): scATAC_BMMC_R1 scATAC_CD34_BMMC_R1 scATAC_PBMC_R1 # sampleColData names(1): ArrowFiles # cellColData names(11): DoubletEnrichment DoubletScore ... Sample # TSSEnrichment # numberOfCells(1): 100 # medianTSS(1): 10.7725 # medianFrags(1): 10200.5 ##C. Subsetting for 1 sample idxSample &lt;- BiocGenerics::which(projHeme$Sample %in% &quot;scATAC_BMMC_R1&quot;) cellsSample &lt;- projHeme$cellNames[idxSample] projHeme[cellsSample, ] # class: ArchRProject # outputDirectory: /Volumes/JG_SSD_2/ArchR_Walkthrough/HemeTutorial # samples(3): scATAC_BMMC_R1 scATAC_CD34_BMMC_R1 scATAC_PBMC_R1 # sampleColData names(1): ArrowFiles # cellColData names(11): DoubletEnrichment DoubletScore ... Sample # TSSEnrichment # numberOfCells(1): 4932 # medianTSS(1): 15.254 # medianFrags(1): 2771 ##D. Increasing TSS cutoff idxPass &lt;- which(projHeme$TSSEnrichment &gt;= 8) cellsPass &lt;- projHeme$cellNames[idxPass] projHeme[cellsPass, ] # class: ArchRProject # outputDirectory: /Volumes/JG_SSD_2/ArchR_Walkthrough/HemeTutorial # samples(3): scATAC_BMMC_R1 scATAC_CD34_BMMC_R1 scATAC_PBMC_R1 # sampleColData names(1): ArrowFiles # cellColData names(11): DoubletEnrichment DoubletScore ... Sample # TSSEnrichment # numberOfCells(1): 10500 # medianTSS(1): 16.9275 # medianFrags(1): 3042 #Example 3. Adding data to an ArchRProject #Add a column removing replicate info bioNames &lt;- gsub(&quot;_R2|_R1|scATAC_&quot;,&quot;&quot;,projHeme$Sample) bioNames # character-Rle of length 10661 with 3 runs # Lengths: 4932 3275 2454 # Values : &quot;BMMC&quot; &quot;CD34_BMMC&quot; &quot;PBMC&quot; projHeme$bioNames &lt;- bioNames #Add a column with partial info bioNames &lt;- bioNames[1:10] cellNames &lt;- projHeme$cellNames[1:10] projHeme &lt;- addCellColData(ArchRProj = projHeme, data = paste0(bioNames), cells = cellNames, name = &quot;bioNames2&quot;) #Lets compare the results getCellColData(projHeme, select = c(&quot;bioNames&quot;, &quot;bioNames2&quot;)) # DataFrame with 10661 rows and 2 columns # bioNames bioNames2 # &lt;character&gt; &lt;character&gt; # scATAC_BMMC_R1#TTATGTCAGTGATTAG-1 BMMC BMMC # scATAC_BMMC_R1#AAGATAGTCACCGCGA-1 BMMC BMMC # scATAC_BMMC_R1#GCATTGAAGATTCCGT-1 BMMC BMMC # scATAC_BMMC_R1#TATGTTCAGGGTTCCC-1 BMMC BMMC # scATAC_BMMC_R1#TCCATCGGTCCCGTGA-1 BMMC BMMC # ... ... ... # scATAC_PBMC_R1#GCTGCGAAGATCCGAG-1 PBMC NA # scATAC_PBMC_R1#GCAGCTGGTGGCCTTG-1 PBMC NA # scATAC_PBMC_R1#GCAGATTGTACGCAAG-1 PBMC NA # scATAC_PBMC_R1#TTCGTTACATTGAACC-1 PBMC NA # scATAC_PBMC_R1#CGCTATCGTGAGGTCA-1 PBMC NA #Example 4. Log10 Unique Fragments df &lt;- getCellColData(projHeme, select = &quot;nFrags&quot;) df # DataFrame with 10661 rows and 1 column # nFrags # &lt;numeric&gt; # scATAC_BMMC_R1#TTATGTCAGTGATTAG-1 26189 # scATAC_BMMC_R1#AAGATAGTCACCGCGA-1 20648 # scATAC_BMMC_R1#GCATTGAAGATTCCGT-1 18991 # scATAC_BMMC_R1#TATGTTCAGGGTTCCC-1 18296 # scATAC_BMMC_R1#TCCATCGGTCCCGTGA-1 17458 # ... ... # scATAC_PBMC_R1#GCTGCGAAGATCCGAG-1 1038 # scATAC_PBMC_R1#GCAGCTGGTGGCCTTG-1 1037 # scATAC_PBMC_R1#GCAGATTGTACGCAAG-1 1033 # scATAC_PBMC_R1#TTCGTTACATTGAACC-1 1033 # scATAC_PBMC_R1#CGCTATCGTGAGGTCA-1 1002 df &lt;- getCellColData(projHeme, select = c(&quot;log10(nFrags)&quot;, &quot;nFrags - 1&quot;)) df # DataFrame with 10661 rows and 2 columns # log10(nFrags) nFrags - 1 # &lt;numeric&gt; &lt;numeric&gt; # scATAC_BMMC_R1#TTATGTCAGTGATTAG-1 4.4181189156542 26188 # scATAC_BMMC_R1#AAGATAGTCACCGCGA-1 4.31487799153581 20647 # scATAC_BMMC_R1#GCATTGAAGATTCCGT-1 4.27854783377585 18990 # scATAC_BMMC_R1#TATGTTCAGGGTTCCC-1 4.26235615159869 18295 # scATAC_BMMC_R1#TCCATCGGTCCCGTGA-1 4.24199448915678 17457 # ... ... ... # scATAC_PBMC_R1#GCTGCGAAGATCCGAG-1 3.01619735351244 1037 # scATAC_PBMC_R1#GCAGCTGGTGGCCTTG-1 3.01577875638904 1036 # scATAC_PBMC_R1#GCAGATTGTACGCAAG-1 3.01410032151962 1032 # scATAC_PBMC_R1#TTCGTTACATTGAACC-1 3.01410032151962 1032 # scATAC_PBMC_R1#CGCTATCGTGAGGTCA-1 3.00086772153123 1001 #Example 5. Log10 Unique Frags vs TSSEnrichment df &lt;- getCellColData(projHeme, select = c(&quot;log10(nFrags)&quot;, &quot;TSSEnrichment&quot;)) df # DataFrame with 10661 rows and 2 columns # log10(nFrags) TSSEnrichment # &lt;numeric&gt; &lt;numeric&gt; # scATAC_BMMC_R1#TTATGTCAGTGATTAG-1 4.4181189156542 7.149 # scATAC_BMMC_R1#AAGATAGTCACCGCGA-1 4.31487799153581 7.911 # scATAC_BMMC_R1#GCATTGAAGATTCCGT-1 4.27854783377585 4.505 # scATAC_BMMC_R1#TATGTTCAGGGTTCCC-1 4.26235615159869 6.946 # scATAC_BMMC_R1#TCCATCGGTCCCGTGA-1 4.24199448915678 4.799 # ... ... ... # scATAC_PBMC_R1#GCTGCGAAGATCCGAG-1 3.01619735351244 24.356 # scATAC_PBMC_R1#GCAGCTGGTGGCCTTG-1 3.01577875638904 22.537 # scATAC_PBMC_R1#GCAGATTGTACGCAAG-1 3.01410032151962 20.146 # scATAC_PBMC_R1#TTCGTTACATTGAACC-1 3.01410032151962 30.198 # scATAC_PBMC_R1#CGCTATCGTGAGGTCA-1 3.00086772153123 21.485 #Plot log10 unique frags by TSS enrichment p &lt;- ggPoint( x = df[,1], y = df[,2], colorDensity = TRUE, continuousSet = &quot;sambaNight&quot;, xlabel = &quot;Log10 Unique Fragments&quot;, ylabel = &quot;TSS Enrichment&quot;, xlim = c(log10(500), quantile(df[,1], probs = 0.99)), ylim = c(0, quantile(df[,2], probs = 0.99)) ) + geom_hline(yintercept = 4, lty = &quot;dashed&quot;) + geom_vline(xintercept = 3, lty = &quot;dashed&quot;) p JJJ TSS-vs-Frags.png #To save a nice looking pdf plotPDF(p, name = &quot;TSS-vs-Frags.pdf&quot;, ArchRProj = projHeme, addDOC = FALSE) "],
["filtering-doublets-from-an-archrproject.html", "1.7 Filtering Doublets from an ArchRProject", " 1.7 Filtering Doublets from an ArchRProject #Remove doublets as normal #If you feel there are more doublets try increasing filterRatio like below projHemeND &lt;- filterDoublets(projHeme) # Filtering 410 cells from ArchRProject! # scATAC_BMMC_R1 : 243 of 4932 (4.9%) # scATAC_CD34_BMMC_R1 : 107 of 3275 (3.3%) # scATAC_PBMC_R1 : 60 of 2454 (2.4%) #Lets see the project now projHemeND # class: ArchRProject # outputDirectory: /Volumes/JG_SSD_2/ArchR_Walkthrough/HemeTutorial # samples(3): scATAC_BMMC_R1 scATAC_CD34_BMMC_R1 scATAC_PBMC_R1 # sampleColData names(1): ArrowFiles # cellColData names(11): DoubletEnrichment DoubletScore ... Sample # TSSEnrichment # numberOfCells(1): 10251 # medianTSS(1): 16.851 # medianFrags(1): 2994 #If you want to filter more cells from the ArchR Project try a higher filterRatio projHemeND2 &lt;- filterDoublets(projHeme, filterRatio = 1.5) # Filtering 614 cells from ArchRProject! # scATAC_BMMC_R1 : 364 of 4932 (7.4%) # scATAC_CD34_BMMC_R1 : 160 of 3275 (4.9%) # scATAC_PBMC_R1 : 90 of 2454 (3.7%) "],
["creating-arrow-files-1.html", "Chapter 2 Creating Arrow Files", " Chapter 2 Creating Arrow Files For this tutorial, we will download a collection of fragment files. Fragment files are one of the base file types of the 10x Genomics analytical platform (and other platforms) and can be easily created from any BAM file. See the ArchR input file types vignette for information on making your own fragment files for input to ArchR. Once we have our fragment files, we provide their paths as a character vector to createArrowFiles(). During creation, some basic metadata and matrices are added to each ArrowFile including a “TileMatrix” containing insertion counts across genome-wide 500-bp bins (see addTileMatrix()) and a “GeneScoreMatrix” that is determined based on weighting insertion counts in tiles nearby a gene promoter (see addGeneScoreMatrix()). These gene activity scores are described in more depth in the Gene Activity Score vignette. #Get Tutorial Data ~1GB To Download (if downloaded already ArchR will bypass downloading). inputFiles &lt;- getTutorialData(&quot;Hematopoiesis&quot;) #Create Arrow Files (~10-15 minutes) w/ helpful messages displaying progress. #For each sample, this step will: # 1. Read accessible fragments. # 2. Calculate QC Information for each cell (TSS Enrichment, Nucleosome info). # 3. Filter cells based on QC parameters. # 4. Create a genome-wide TileMatrix using 500-bp bins. # 5. Create a GeneScoreMatrix using the provided geneAnnotation. ArrowFiles &lt;- createArrowFiles( inputFiles = inputFiles, sampleNames = names(inputFiles), filterTSS = 4, #Dont set this too high because you can always increase later filterFrags = 1000, addTileMat = TRUE, addGeneScoreMat = TRUE ) "],
["qc-tss-scores-by-unique-fragments.html", "2.1 QC TSS Scores by Unique Fragments", " 2.1 QC TSS Scores by Unique Fragments Since this was plotted prior to creation of an ArchRProject we go to QualityControl/scATAC_BMMC_R2/scATAC_BMMC_R2-TSS_by_Unique_Frags.pdf for the plot below. "],
["qc-fragment-size-distribution.html", "2.2 QC Fragment Size Distribution", " 2.2 QC Fragment Size Distribution Since this was plotted prior to creation of an ArchRProject we go to QualityControl/scATAC_BMMC_R2/scATAC_BMMC_R2-Fragment_Size_Distribution.pdf for the plot below. "]
]
